#include <stdio.h>
#include <stdlib.h>

// Define a node structure
struct Node {
    int data;           // Data part of the node
    struct Node* next;  // Pointer to the next node
};

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (!newNode) {
        printf("Memory allocation failed!\n");
        exit(1); // Exit if memory allocation fails
    }
    newNode->data = value; // Set the node's data
    newNode->next = NULL;  // Set the next pointer to NULL
    return newNode;        // Return the created node
}

// Function to insert a node at the beginning of the linked list
void insertAtBeginning(struct Node** head, int value) {
    struct Node* newNode = createNode(value); // Create a new node
    newNode->next = *head;                     // Link the new node to the current head
    *head = newNode;                           // Update the head to point to the new node
    printf("%d inserted at the beginning.\n", value);
}

// Function to display the linked list
void displayList(struct Node* head) {
    if (head == NULL) {
        printf("The list is empty.\n");
        return;
    }
    
    struct Node* temp = head; // Temporary pointer to traverse the list
    printf("Linked List: ");
    while (temp != NULL) {
        printf("%d -> ", temp->data); // Print current node's data
        temp = temp->next;             // Move to the next node
    }
    printf("NULL\n"); // Indicate the end of the list
}

// Example usage
int main() {
    struct Node* head = NULL; // Initialize the head of the list

    // Insert elements at the beginning
    insertAtBeginning(&head, 30);
    insertAtBeginning(&head, 20);
    insertAtBeginning(&head, 10);

    // Display the linked list
    displayList(head);

    return 0;
}

output
30 inserted at the beginning.
20 inserted at the beginning.
10 inserted at the beginning.
Linked List: 10 -> 20 -> 30 -> NULL
