#include <stdio.h>
#include <stdlib.h>

// Define a node structure
struct Node {
    int data;           // Data part of the node
    struct Node* next;  // Pointer to the next node
};

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (!newNode) {
        printf("Memory allocation failed!\n");
        exit(1); // Exit if memory allocation fails
    }
    newNode->data = value; // Set the node's data
    newNode->next = NULL;  // Set the next pointer to NULL
    return newNode;        // Return the created node
}

// Function to insert a node at the end of the linked list
void insertAtEnd(struct Node** head, int value) {
    struct Node* newNode = createNode(value); // Create a new node

    // If the linked list is empty, make the new node the head
    if (*head == NULL) {
        *head = newNode;
        return;
    }

    // Otherwise, traverse to the last node
    struct Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next; // Move to the next node
    }
    
    // Link the last node to the new node
    temp->next = newNode;
}

// Function to delete a node at a specific location
void deleteAtPosition(struct Node** head, int position) {
    // If the linked list is empty
    if (*head == NULL) {
        printf("The list is empty. Nothing to delete.\n");
        return;
    }

    struct Node* temp = *head;

    // If the head needs to be removed
    if (position == 0) {
        *head = temp->next; // Change head
        printf("Deleted node with value: %d\n", temp->data);
        free(temp); // Free old head
        return;
    }

    // Find the previous node of the node to be deleted
    for (int i = 0; temp != NULL && i < position - 1; i++) {
        temp = temp->next; // Move to the next node
    }

    // If the position is greater than the number of nodes
    if (temp == NULL || temp->next == NULL) {
        printf("Position %d is out of bounds. Deletion failed.\n", position);
        return;
    }

    // Node temp->next is the node to be deleted
    struct Node* nextNode = temp->next->next; // Store pointer to the next of node to be deleted
    printf("Deleted node with value: %d\n", temp->next->data);
    free(temp->next); // Free memory of the node to be deleted
    temp->next = nextNode; // Unlink the deleted node from the list
}

// Function to display the linked list
void displayList(struct Node* head) {
    if (head == NULL) {
        printf("The list is empty.\n");
        return;
    }
    
    struct Node* temp = head; // Temporary pointer to traverse the list
    printf("Linked List: ");
    while (temp != NULL) {
        printf("%d -> ", temp->data); // Print current node's data
        temp = temp->next;             // Move to the next node
    }
    printf("NULL\n"); // Indicate the end of the list
}

// Example usage
int main() {
    struct Node* head = NULL; // Initialize the head of the list

    // Insert elements at the end
    insertAtEnd(&head, 10);
    insertAtEnd(&head, 20);
    insertAtEnd(&head, 30);
    insertAtEnd(&head, 40);

    // Display the linked list
    displayList(head);

    // Delete elements at specific positions
    deleteAtPosition(&head, 2); // Delete node at position 2 (0-indexed)
    displayList(head);

    deleteAtPosition(&head, 0); // Delete node at position 0 (head)
    displayList(head);

    deleteAtPosition(&head, 1); // Delete node at position 1 (end)
    displayList(head);

    // Attempt to delete at an out-of-bounds position
    deleteAtPosition(&head, 5); // Out of bounds

    return 0;
}

output
Linked List: 10 -> 20 -> 30 -> 40 -> NULL
Deleted node with value: 30
Linked List: 10 -> 20 -> 40 -> NULL
Deleted node with value: 10
Linked List: 20 -> 40 -> NULL
Deleted node with value: 40
Linked List: 20 -> NULL
Position 5 is out of bounds. Deletion failed.
