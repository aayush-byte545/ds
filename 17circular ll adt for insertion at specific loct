#include <stdio.h>
#include <stdlib.h>

// Define a node structure
struct Node {
    int data;           // Data part of the node
    struct Node* next;  // Pointer to the next node
};

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (!newNode) {
        printf("Memory allocation failed!\n");
        exit(1); // Exit if memory allocation fails
    }
    newNode->data = value; // Set the node's data
    newNode->next = newNode;  // Point to itself to form a circular link
    return newNode;        // Return the created node
}

// Function to insert a node at a specific location in the circular linked list
void insertAtPosition(struct Node** head, int value, int position) {
    struct Node* newNode = createNode(value); // Create a new node

    // If the list is empty or inserting at position 0
    if (*head == NULL || position == 0) {
        if (*head == NULL) { // List is empty
            *head = newNode; // Initialize with the new node
        } else { // Inserting at the beginning
            struct Node* temp = *head;

            // Traverse to the last node
            while (temp->next != *head) {
                temp = temp->next; // Move to the next node
            }

            // Link the last node to the new node
            temp->next = newNode; // Link last node to the new node
        }

        // Link the new node to the head to maintain circularity
        newNode->next = *head; // Complete the circular link
        *head = newNode; // Update head pointer
        return;
    }

    // Traverse to find the node before the position
    struct Node* temp = *head;
    for (int i = 0; i < position - 1; i++) {
        temp = temp->next;
        if (temp == *head) { // If we reach back to head
            printf("Position exceeds the length of the list. Insertion failed.\n");
            free(newNode); // Free allocated memory for the new node
            return;
        }
    }

    // Insert the new node at the desired position
    newNode->next = temp->next; // Link new node to the next node
    temp->next = newNode; // Link previous node to the new node
}

// Function to display the circular linked list
void displayList(struct Node* head) {
    if (head == NULL) {
        printf("The list is empty.\n");
        return;
    }
    
    struct Node* temp = head; // Temporary pointer to traverse the list
    printf("Circular Linked List: ");
    do {
        printf("%d -> ", temp->data); // Print current node's data
        temp = temp->next;             // Move to the next node
    } while (temp != head); // Loop until we return to the head
    printf("(head)\n"); // Indicate that we've looped back to the head
}

// Example usage
int main() {
    struct Node* head = NULL; // Initialize the head of the list

    // Insert elements at specific positions
    insertAtPosition(&head, 30, 0); // Insert 30 at position 0
    insertAtPosition(&head, 10, 0); // Insert 10 at position 0
    insertAtPosition(&head, 20, 1); // Insert 20 at position 1
    insertAtPosition(&head, 40, 2); // Insert 40 at position 2

    // Display the circular linked list
    displayList(head);

    return 0;
}

output
Circular Linked List: 10 -> 20 -> 30 -> 40 -> (head)
