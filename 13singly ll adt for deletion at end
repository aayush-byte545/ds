#include <stdio.h>
#include <stdlib.h>

// Define a node structure
struct Node {
    int data;           // Data part of the node
    struct Node* next;  // Pointer to the next node
};

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (!newNode) {
        printf("Memory allocation failed!\n");
        exit(1); // Exit if memory allocation fails
    }
    newNode->data = value; // Set the node's data
    newNode->next = NULL;  // Set the next pointer to NULL
    return newNode;        // Return the created node
}

// Function to insert a node at the end of the linked list
void insertAtEnd(struct Node** head, int value) {
    struct Node* newNode = createNode(value); // Create a new node

    // If the linked list is empty, make the new node the head
    if (*head == NULL) {
        *head = newNode;
        return;
    }

    // Otherwise, traverse to the last node
    struct Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next; // Move to the next node
    }
    
    // Link the last node to the new node
    temp->next = newNode;
}

// Function to delete a node from the end of the linked list
void deleteAtEnd(struct Node** head) {
    if (*head == NULL) {
        printf("The list is empty. Nothing to delete.\n");
        return;
    }

    // If there is only one node
    if ((*head)->next == NULL) {
        printf("Deleted node with value: %d\n", (*head)->data);
        free(*head); // Free the memory allocated for the only node
        *head = NULL; // Set head to NULL
        return;
    }

    struct Node* temp = *head;
    // Traverse to the second last node
    while (temp->next->next != NULL) {
        temp = temp->next; // Move to the next node
    }

    // Delete the last node
    printf("Deleted node with value: %d\n", temp->next->data);
    free(temp->next);  // Free the memory allocated for the last node
    temp->next = NULL; // Set the next pointer of the second last node to NULL
}

// Function to display the linked list
void displayList(struct Node* head) {
    if (head == NULL) {
        printf("The list is empty.\n");
        return;
    }
    
    struct Node* temp = head; // Temporary pointer to traverse the list
    printf("Linked List: ");
    while (temp != NULL) {
        printf("%d -> ", temp->data); // Print current node's data
        temp = temp->next;             // Move to the next node
    }
    printf("NULL\n"); // Indicate the end of the list
}

// Example usage
int main() {
    struct Node* head = NULL; // Initialize the head of the list

    // Insert elements at the end
    insertAtEnd(&head, 10);
    insertAtEnd(&head, 20);
    insertAtEnd(&head, 30);

    // Display the linked list
    displayList(head);

    // Delete elements from the end
    deleteAtEnd(&head);
    displayList(head);

    deleteAtEnd(&head);
    displayList(head);

    deleteAtEnd(&head);
    displayList(head);

    // Attempt to delete from an empty list
    deleteAtEnd(&head);

    return 0;
}

output
Linked List: 10 -> 20 -> 30 -> NULL
Deleted node with value: 30
Linked List: 10 -> 20 -> NULL
Deleted node with value: 20
Linked List: 10 -> NULL
Deleted node with value: 10
Linked List: The list is empty.
The list is empty. Nothing to delete.
