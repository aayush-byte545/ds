#include <stdio.h>
#include <stdlib.h>

// Structure for the adjacency list node
struct Node {
    int data;                // Vertex number
    struct Node* next;       // Pointer to the next node
};

// Structure for the graph
struct Graph {
    int numVertices;         // Number of vertices
    struct Node** adjLists;  // Array of adjacency lists
};

// Function to create a new adjacency list node
struct Node* createNode(int v) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = v;
    newNode->next = NULL;
    return newNode;
}

// Function to create a graph
struct Graph* createGraph(int vertices) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->numVertices = vertices;

    // Create an array of adjacency lists
    graph->adjLists = (struct Node**)malloc(vertices * sizeof(struct Node*));

    // Initialize each adjacency list
    for (int i = 0; i < vertices; i++) {
        graph->adjLists[i] = NULL;
    }
    return graph;
}

// Function to add an edge to the graph
void addEdge(struct Graph* graph, int src, int dest) {
    // Add an edge from src to dest
    struct Node* newNode = createNode(dest);
    newNode->next = graph->adjLists[src];
    graph->adjLists[src] = newNode;

    // Uncomment the following line if the graph is undirected
    // newNode = createNode(src); newNode->next = graph->adjLists[dest]; graph->adjLists[dest] = newNode;
}

// Function to perform DFS
void DFS(struct Graph* graph, int vertex, int* visited) {
    // Mark the current vertex as visited and print it
    visited[vertex] = 1;
    printf("%d ", vertex);

    // Recur for all the vertices adjacent to this vertex
    struct Node* adjList = graph->adjLists[vertex];
    while (adjList != NULL) {
        int connectedVertex = adjList->data;
        if (!visited[connectedVertex]) {
            DFS(graph, connectedVertex, visited);
        }
        adjList = adjList->next;
    }
}

// Function to perform DFS for disconnected graphs
void DFSUtil(struct Graph* graph) {
    int* visited = (int*)malloc(graph->numVertices * sizeof(int));
    for (int i = 0; i < graph->numVertices; i++) {
        visited[i] = 0; // Initialize all vertices as not visited
    }

    // Call the recursive DFS helper function for each vertex
    for (int i = 0; i < graph->numVertices; i++) {
        if (!visited[i]) {
            DFS(graph, i, visited);
        }
    }
    free(visited);
}

// Example usage
int main() {
    struct Graph* graph = createGraph(5); // Create a graph with 5 vertices

    // Add edges to the graph
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 4);
    
    printf("Depth First Search (DFS) traversal of the graph:\n");
    DFSUtil(graph); // Perform DFS traversal

    // Free memory (optional)
    for (int i = 0; i < graph->numVertices; i++) {
        struct Node* temp = graph->adjLists[i];
        while (temp) {
            struct Node* toDelete = temp;
            temp = temp->next;
            free(toDelete);
        }
    }
    free(graph->adjLists);
    free(graph);

    return 0;
}

output
Depth First Search (DFS) traversal of the graph:
0 2 4 1 4 3 
