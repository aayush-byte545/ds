#include <stdio.h>
#include <stdlib.h>

// Define a structure for the nodes in the BST
struct Node {
    int data;              // Data part of the node
    struct Node* left;     // Pointer to the left child
    struct Node* right;    // Pointer to the right child
};

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (!newNode) {
        printf("Memory allocation failed!\n");
        exit(1); // Exit if memory allocation fails
    }
    newNode->data = value;  // Set the node's data
    newNode->left = NULL;   // Initialize left child to NULL
    newNode->right = NULL;  // Initialize right child to NULL
    return newNode;         // Return the created node
}

// Function to insert a node into the BST
struct Node* insert(struct Node* root, int value) {
    // If the tree is empty, create a new node
    if (root == NULL) {
        return createNode(value);
    }
    
    // Otherwise, recur down the tree
    if (value < root->data) {
        root->left = insert(root->left, value);  // Insert in the left subtree
    } else {
        root->right = insert(root->right, value); // Insert in the right subtree
    }
    return root; // Return the unchanged root pointer
}

// Function to perform pre-order traversal of the BST
void preOrderTraversal(struct Node* root) {
    if (root == NULL) {
        return; // Base case: if the node is NULL, return
    }
    
    printf("%d ", root->data);     // Print the node's data
    preOrderTraversal(root->left);  // Visit left subtree
    preOrderTraversal(root->right); // Visit right subtree
}

// Example usage
int main() {
    struct Node* root = NULL; // Initialize the root of the BST

    // Insert elements into the BST
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 20);
    insert(root, 40);
    insert(root, 70);
    insert(root, 60);
    insert(root, 80);

    // Perform pre-order traversal of the BST
    printf("Pre-order traversal of the BST: ");
    preOrderTraversal(root); // Output the elements in pre-order
    printf("\n");

    return 0;
}

output
Pre-order traversal of the BST: 50 30 20 40 70 60 80 
